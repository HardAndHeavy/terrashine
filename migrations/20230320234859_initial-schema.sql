create table if not exists terraform_provider (
    "id" bigint generated by default as identity primary key,
    "hostname" text not null check (char_length("hostname") <= 253),
    "namespace" text not null check (char_length("namespace") <= 255),
    "type" text not null check (char_length("type") <= 255),
    "expires_at" timestamp with time zone not null,
    constraint unique_provider unique (hostname, namespace, type)
);

create sequence if not exists artifact_ids;

create table if not exists "terraform_provider_version" (
    "id" bigint generated by default as identity primary key,

    "provider_id" bigint references "terraform_provider" ("id") not null,
    "version" text not null check (char_length("version") <= 255),
    "os" text not null check (char_length("os") <= 255),
    "arch" text not null check (char_length("arch") <= 255),

    "upstream_package_url" text check (char_length("upstream_package_url") <= 4096),
    "artifact_id" bigint,
    "artifact_timestamp" timestamp with time zone,

    constraint "version_tuple" unique ("provider_id","version", "os", "arch"),
    constraint "unique_artifact_id" unique ("artifact_id"),
    constraint "consistent_upload_details" check (
        ("upstream_package_url" is null and "artifact_id" is null and "artifact_timestamp" is null)
        or
        ("upstream_package_url" is not null and "artifact_id" is not null and "artifact_timestamp" is not null))
);

